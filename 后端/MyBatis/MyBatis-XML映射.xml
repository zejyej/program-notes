Mapper xml 文件
    
    1.MyBatis针对SQL构建
        
        cache cache-ref resultMap sql insert update delete select
    
    2.select insert update delete 可用字段及示例
    
    <select id="selectPerson" parameterType="int" resultType="hashmap">
        select * from person where id = #{id}
    </select>
    这个语句被称作 selectPerson，接受一个 int（或 Integer）类型的参数，
    并返回一个 HashMap 类型的对象，其中的键是列名，值便是结果行中的对应值。 
    String selectPerson = "SELECT * FROM PERSON WHERE ID=?";
    PreparedStatement ps = conn.prepareStatement(selectPerson);
    ps.setInt(1,id);

    <select
        id="selectPerson" //命名空间中唯一的标识符，可以被用来引用这条语句。 
        parameterType="int" //将会传入这条语句的参数类的完全限定名或别名。
        parameterMap="deprecated" //这是引用外部 parameterMap 的已经被废弃的方法
        resultType="hashmap" //从这条语句中返回的期望类型的类的完全限定名或别名
        resultMap="personResultMap" // 	外部 resultMap 的命名引用
        flushCache="false" //true:任何时候只要语句被调用，都会导致本地缓存和二级缓存都会被清空
        useCache="true" //true:将会导致本条语句的结果被二级缓存
        timeout="10000" //驱动程序等待数据库返回请求结果的秒数
        fetchSize="256" //驱动程序每次批量返回的结果行数和这个设置值相等
        statementType="PREPARED" // Statement，PreparedStatement 或 CallableStatement
        resultSetType="FORWARD_ONLY" //FORWARD_ONLY，SCROLL_SENSITIVE 或 SCROLL_INSENSITIVE 中的一个
    >

    <insert
        id="insertAuthor"
        parameterType="domain.blog.Author"
         flushCache="true"
        statementType="PREPARED"
        keyProperty="" //（仅对 insert 和 update 有用）唯一标记一个属性，MyBatis 会通过 getGeneratedKeys 的返回值或者通过 insert 语句的 selectKey 子元素设置它的键值
        keyColumn="" //（仅对 insert 和 update 有用）通过生成的键值设置表中的列名，这个设置仅在某些数据库（像 PostgreSQL）是必须的，当主键列不是表中的第一列的时候需要设置
        useGeneratedKeys="" //（仅对 insert 和 update 有用）这会令 MyBatis 使用 JDBC 的 getGeneratedKeys 方法来取出由数据库内部生成的主键
        timeout="20"
    >

    <update
        id="updateAuthor"
        parameterType="domain.blog.Author"
        flushCache="true"
        statementType="PREPARED"
        timeout="20"
    >

    <delete
        id="deleteAuthor"
        parameterType="domain.blog.Author"
        flushCache="true"
        statementType="PREPARED"
        timeout="20"
    >

    <insert id="insertAuthor">
        insert into Author (id,username,password,email,bio)
            values (#{id},#{username},#{password},#{email},#{bio})
    </insert>

    <update id="updateAuthor">
        update Author set
            username = #{username},
            password = #{password},
            email = #{email},
            bio = #{bio}
        where id = #{id}
    </update>

    <delete id="deleteAuthor">
        delete from Author where id = #{id}
    </delete>

    自动生成主键
    <insert id="insertAuthor" useGeneratedKeys="true"
        keyProperty="id">
        insert into Author (username,password,email,bio)
        values (#{username},#{password},#{email},#{bio})
    </insert>

    多行插入
    <insert id="insertAuthor" useGeneratedKeys="true"
        keyProperty="id">
        insert into Author (username, password, email, bio) values
        <foreach item="item" collection="list" separator=",">
            (#{item.username}, #{item.password}, #{item.email}, #{item.bio})
        </foreach>
    </insert>

    不支持自动生成主键的 JDBC 驱动，Mybatis提供了selectKey
    <selectKey
        keyProperty="id"
        resultType="int"
        order="BEFORE"
        statementType="PREPARED">

    3.sql
    
    这个元素可以被用来定义可重用的 SQL 代码段，可以包含在其他语句中。
    它可以被静态地(在加载参数) 参数化. 不同的属性值通过包含的实例变化. 
    <sql id="userColums">
        ${alias}.id,${alias}.username,${alias}.password 
    </sql>

    <select id="selectUsers" resultType="map">
        select
        <include refid="userColumns"><property name="alias" value="t1"/></include>,
        <include refid="userColumns"><property name="alias" value="t2"/></include>
        from some_table t1
        cross join some_table t2
    </select>

    属性值也可以被用在 include 元素的 refid 属性里
    <include refid="${include_target}"/>
    或include内部
    ${prefix}Table

    <sql id="sometable">
        ${prefix}Table
    </sql>
    <sql id="someinclude">
        from
        <include refid="${include_target}"/>
    </sql>

    <select id="select" resultType="map">
        select
            field1, field2, field3
        <include refid="someinclude">
            <property name="prefix" value="Some"/>
            <property name="include_target" value="sometable"/>
        </include>
    </select>

    4.参数

    <select id="selectUsers" resultType="User">
        select id, username, password
        from users
        where id = #{id}
    </select>

    <insert id="insertUser" parameterType="User">
        insert into users (id, username, password)
        values (#{id}, #{username}, #{password})
    </insert>

    参数可有指定一个特殊的数据类型
    #{property,javaType=int,jdbcType=NUMERIC}
    像 MyBatis 的剩余部分一样，javaType 通常可以由参数对象确定，除非该对象是一个 HashMap。
    这时所使用的 TypeHandler 应该明确指明 javaType。 
    如果一个列允许 null 值，并且会传递值 null 的参数，就必须要指定 JDBC Type。
    阅读 PreparedStatement.setNull() 的 JavaDocs 文档来获取更多信息。 

    为了以后定制类型处理方式，你也可以指定一个特殊的类型处理器类（或别名），比如：
    #{age,javaType=int,jdbcType=NUMERIC,typeHandler=MyTypeHandler}

    对于数值类型，还有一个小数保留位数的设置，来确定小数点后保留的位数。 
    #{height,javaType=double,jdbcType=NUMERIC,numericScale=2}

    最后，mode 属性允许你指定 IN，OUT 或 INOUT 参数。如果参数为 OUT 或 INOUT，
    参数对象属性的真实值将会被改变，就像你在获取输出参数时所期望的那样。
    如果 mode 为 OUT（或 INOUT），而且 jdbcType 为 CURSOR(也就是 Oracle 的 REFCURSOR)，
    你必须指定一个 resultMap 来映射结果集 ResultMap 到参数类型。
    要注意这里的 javaType 属性是可选的，如果留空并且 jdbcType 是 CURSOR，
    它会被自动地被设为 ResultMap。 
    #{department, mode=OUT, jdbcType=CURSOR, javaType=ResultSet, resultMap=departmentResultMap}

    MyBatis 也支持很多高级的数据类型，比如结构体，但是当注册 out 参数时你必须告诉它语句类型名称。
    比如（再次提示，在实际中要像这样不能换行）： 
    #{middleInitial, mode=OUT, jdbcType=STRUCT, jdbcTypeName=MY_TYPE, resultMap=departmentResultMap}

    尽管所有这些选项很强大，但大多时候你只须简单地指定属性名，其他的事情 MyBatis 会自己去推断，
    顶多要为可能为空的列指定 jdbcType
    #{firstName}
    #{middleInitial,jdbcType=VARCHAR}
    #{lastName}

    5.resultMap

    resultMap 元素是 MyBatis 中最重要最强大的元素。它可以让你从 90% 的 JDBC ResultSets 数据提取代码中解放出来, 
    并在一些情形下允许你做一些 JDBC 不支持的事情。 实际上，在对复杂语句进行联合映射的时候，它很可能可以代替数千行的同等功能的代码。 
    ResultMap 的设计思想是，简单的语句不需要明确的结果映射，而复杂一点的语句只需要描述它们的关系就行了。

     <select id="selectUsers" resultType="map">
        select id, username, hashedPassword
        from some_table
        where id = #{id}
    </select>

    你的程序更可能会使用 JavaBean 或 POJO(Plain Old Java Objects，普通 Java 对象)作为领域模型。 MyBatis 对两者都支持
    package com.someapp.model;
    public class User {
        private int id;
        private String username;
        private String hashedPassword;
  
        public int getId() {
            return id;
        }
        public void setId(int id) {
            this.id = id;
        }
        public String getUsername() {
            return username;
        }
        public void setUsername(String username) {
            this.username = username;
        }
        public String getHashedPassword() {
            return hashedPassword;
        }
        public void setHashedPassword(String hashedPassword) {
            this.hashedPassword = hashedPassword;
        }
    }

    这样的一个 JavaBean 可以被映射到 ResultSet，就像映射到 HashMap 一样简单。 
    <select id="selectUsers" resultType="com.somapp.model.User">
        select id,username,hashedPassword 
        from some_table 
        where id=#{id}
    </select>

    类型别名是你的好帮手。使用它们，你就可以不用输入类的完全限定名称了
    <!-- In mybatis-config.xml file -->
    <typeAlias type="com.someapp.model.User" alias="User"/>

    <!-- In SQL Mapping XML file -->
    <select id="selectUsers" resultType="User">
        select id, username, hashedPassword
        from some_table
        where id = #{id}
    </select>

    这些情况下，MyBatis 会在幕后自动创建一个 ResultMap，再基于属性名来映射列到 JavaBean 的属性上。
    如果列名和属性名没有精确匹配，可以在 SELECT 语句中对列使用别名（这是一个 基本的 SQL 特性）来匹配标签。
    <select id="selectUsers" resultType="User">
        select
            user_id             as       "id",
            user_name           as       "userName",
            hashed_password     as       "hashedPassword"
        from some_table
        where id = #{id}
    </select>

    ResultMap 最优秀的地方在于，虽然你已经对它相当了解了，但是根本就不需要显式地用到他们。 
    上面这些简单的示例根本不需要下面这些繁琐的配置。 
    出于示范的原因，让我们来看看最后一个示例中，如果使用外部的 resultMap 会怎样，这也是解决列名不匹配的另外一种方式。

    <resultMap id="userResultMap" type="User">
        <id property="id" column="user_id" />
        <result property="username" column="user_name"/>
         <result property="password" column="hashed_password"/>
    </resultMap>
    引用它的语句使用 resultMap 属性就行了（注意我们去掉了 resultType 属性）
    <select id="selectUsers" resultMap="userResultMap">
        select user_id, user_name, hashed_password
        from some_table
        where id = #{id}
    </select>

    6.高级结果映射

    <!-- Very Complex Statement -->
    <select id="selectBlogDetails" resultMap="detailedBlogResultMap">
        select
            B.id as blog_id,
            B.title as blog_title,
            B.author_id as blog_author_id,
            A.id as author_id,
            A.username as author_username,
            A.password as author_password,
            A.email as author_email,
            A.bio as author_bio,
            A.favourite_section as author_favourite_section,
            P.id as post_id,
            P.blog_id as post_blog_id,
            P.author_id as post_author_id,
            P.created_on as post_created_on,
            P.section as post_section,
            P.subject as post_subject,
            P.draft as draft,
            P.body as post_body,
            C.id as comment_id,
            C.post_id as comment_post_id,
            C.name as comment_name,
            C.comment as comment_text,
            T.id as tag_id,
            T.name as tag_name
        from Blog B
            left outer join Author A on B.author_id = A.id
            left outer join Post P on B.id = P.blog_id
            left outer join Comment C on P.id = C.post_id
            left outer join Post_Tag PT on PT.post_id = P.id
            left outer join Tag T on PT.tag_id = T.id
        where B.id = #{id}
</select>

<!-- 超复杂的 Result Map -->
<resultMap id="detailedBlogResultMap" type="Blog">
    <constructor>
        <idArg column="blog_id" javaType="int"/>
    </constructor>
    <result property="title" column="blog_title"/>
    <association property="author" javaType="Author">
        <id property="id" column="author_id"/>
        <result property="username" column="author_username"/>
        <result property="password" column="author_password"/>
        <result property="email" column="author_email"/>
        <result property="bio" column="author_bio"/>
        <result property="favouriteSection" column="author_favourite_section"/>
    </association>
    <collection property="posts" ofType="Post">
        <id property="id" column="post_id"/>
        <result property="subject" column="post_subject"/>
        <association property="author" javaType="Author"/>
        <collection property="comments" ofType="Comment">
            <id property="id" column="comment_id"/>
        </collection>
        <collection property="tags" ofType="Tag" >
            <id property="id" column="tag_id"/>
        </collection>
        <discriminator javaType="int" column="draft">
            <case value="1" resultType="DraftPost"/>
        </discriminator>
  </collection>
</resultMap>

construction - 用于在实例化类时，注入结果到构造方法中
    idArg - ID 参数;标记出作为 ID 的结果可以帮助提高整体性能
    arg - 将被注入到构造方法的一个普通结果
id – 一个 ID 结果;标记出作为 ID 的结果可以帮助提高整体性能
result – 注入到字段或 JavaBean 属性的普通结果
association – 一个复杂类型的关联;许多结果将包装成这种类型
    嵌套结果映射 – 关联可以指定为一个 resultMap 元素，或者引用一个 
collection – 一个复杂类型的集合 
    嵌套结果映射 – 集合可以指定为一个 resultMap 元素，或者引用一个
discriminator – 使用结果值来决定使用哪个 resultMap
    case – 基于某些值的结果映射 
        嵌套结果映射 – 一个 case 也是一个映射它本身的结果,因此可以包含很多相 同的元素，或者它可以参照一个外部的 resultMap。 
    


































